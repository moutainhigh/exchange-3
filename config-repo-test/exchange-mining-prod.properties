# 设置IO线程数, 它主要执行非阻塞的任务,它们会负责多个连接, 默认设置每个CPU核心一个线程，不要设置过大，如果过大，启动项目会报错：打开文件数过多
server.undertow.io-threads=16
# 阻塞任务线程池, 当执行类似servlet请求阻塞操作, undertow会从这个线程池中取得线程,它的值设置取决于系统的负载，高吞吐量的应用可以设置大一点
server.undertow.worker-threads=4000
# 以下的配置会影响buffer,这些buffer会用于服务器连接的IO操作,有点类似netty的池化内存管理
# 每块buffer的空间大小,越小的空间被利用越充分，不要设置太大，以免影响其他应用
server.undertow.buffer-size=1024
# 是否分配的直接内存(NIO直接分配的堆外内存)
server.undertow.direct-buffers=true


#spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
#spring.datasource.url=jdbc:mysql://rm-j6c056ogj7qml8l9tbo.mysql.rds.aliyuncs.com:3306/ex_trade?useSSL=false&useUnicode=true&characterEncoding=UTF-8&serverTimezone=CTT&pinGlobalTxToPhysicalConnection=true
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
#spring.datasource.username=root
#spring.datasource.password=TestDB2018 

#spring.datasource.hikari.minimum-idle=10
#spring.datasource.hikari.maximum-pool-size=50
#spring.datasource.hikari.idle-timeout=30000
#spring.datasource.hikari.pool-name=SpringBootHikariCP
#spring.datasource.hikari.max-lifetime=2000000
#spring.datasource.hikari.allow-pool-suspension=true
#spring.datasource.hikari.connection-test-query=SELECT 1
#spring.datasource.hikari.connection-timeout=30000
##对预编译进行本地缓存
#spring.datasource.hikari.cachePrepStmts=true
##设置本地缓存数
#spring.datasource.hikari.prepStmtCacheSize=250
##设置预编译sql长度限制
#spring.datasource.hikari.prepStmtCacheSqlLimit=2048
#
##验证连接的有效性
#spring.datasource.test-while-idle=true
##获取连接时候验证，会影响性能
#spring.datasource.test-on-borrow=true
#spring.datasource.validation-query=SELECT 1 FROM DUAL
##空闲连接回收的时间间隔，与test-while-idle一起使用，设置5分钟
#spring.datasource.time-between-eviction-runs-millis=300000
##连接池空闲连接的有效时间 ，设置30分钟
#spring.datasource.min-evictable-idle-time-millis=1800000


# 下面为连接池的补充设置，应用到上面所有数据源中
# 初始化大小，最小，最大
spring.datasource.druid.initial-size=5
spring.datasource.druid.minIdle=5
spring.datasource.druid.maxActive=20
# 配置获取连接等待超时的时间
spring.datasource.druid.maxWait=60000
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
spring.datasource.druid.timeBetweenEvictionRunsMillis=60000
# 配置一个连接在池中最小生存的时间，单位是毫秒
spring.datasource.druid.minEvictableIdleTimeMillis=300000
spring.datasource.druid.validationQuery=SELECT 1 FROM DUAL
spring.datasource.druid.testWhileIdle=true
spring.datasource.druid.testOnBorrow=false
spring.datasource.druid.testOnReturn=false
# 打开PSCache，并且指定每个连接上PSCache的大小
spring.datasource.druid.poolPreparedStatements=true
spring.datasource.druid.maxPoolPreparedStatementPerConnectionSize=20
# 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙


# 配置StatFilter
spring.datasource.druid.filter.stat.db-type=mysql
spring.datasource.druid.filter.stat.log-slow-sql=true
spring.datasource.druid.filter.stat.slow-sql-millis=2000
spring.datasource.druid.stat-view-servlet.login-username=vvvex
spring.datasource.druid.stat-view-servlet.login-password=vvvex776

# 配置WallFilter
spring.datasource.druid.filter.wall.enabled=true
spring.datasource.druid.filter.wall.db-type=mysql
spring.datasource.druid.filter.wall.config.delete-allow=false
spring.datasource.druid.filter.wall.config.drop-table-allow=false

# 通过connectProperties属性来打开mergeSql功能；慢SQL记录
spring.datasource.druid.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
# 合并多个DruidDataSource的监控数据
#spring.datasource.druid.useGlobalDataSourceStat=true


